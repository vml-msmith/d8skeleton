<?php

/**
 * @file
 * Wendy's Core hook implementations.
 */

use Drupal\core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_entity_base_field_info().
 *
 * Add fields to menus:
 *  - Mobile Link Title.
 */
function wendys_core_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'menu_link_content') {
    $fields['field_menu_mobile_link_title'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Mobile menu link title'))
      ->setDescription(t('The text to be used for the mobile version of this link. Will use the Menu link title if left blank.'))
      ->setSetting('max_length', 255)
      ->setDisplayOptions('view',
        [
          'label' => 'hidden',
          'type' => 'string',
          'weight' => -5,
        ])
      ->setDisplayOptions('form',
        [
          'type' => 'string_textfield',
          'weight' => -5,
        ])
      ->setDisplayConfigurable('form', TRUE);
    $fields['field_menu_icon'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Icon'))
      ->setDescription('<p>' . t('Select an icon to display before this item') . '</p>')
      ->setSetting('target_type', 'taxonomy_term')
      ->setSetting('handler_settings', ['target_bundles' => ['taxonomy_term' => 'menu_icons']])
      ->setDisplayOptions('view',
        [
          'label'  => 'hidden',
          'type'   => 'taxonomy_term',
        ])
      ->setDisplayOptions('form',
        [
          'type' => 'options_select',
          'weight' => -4,

        ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_preprocess().
 *
 * Display custom fields on menus:
 *  - Mobile Link Title.
 */
function wendys_core_preprocess(&$variables, $hook) {
  if (isset($variables['plugin_id']) &&
    strpos($variables['plugin_id'], 'system_menu_block:') !== FALSE) {
    foreach ($variables['content']['#items'] as $k => &$v) {
      if (method_exists($v['original_link'], 'getUuid')) {
        $id = $v['original_link']->getMetadata()['entity_id'];
        $plugin_id_parts = explode(':', $v['original_link']->getPluginId());
        $uuid = $plugin_id_parts[1];
        $menu_content = current(\Drupal::entityManager()->getStorage('menu_link_content')->loadByProperties(['uuid' => $uuid]));

        if ($menu_content->hasField('field_menu_mobile_link_title')) {
          $mobile_title = $menu_content->get('field_menu_mobile_link_title')->value;
          $variables['content']['#items'][$k]['mobile_title'] = $mobile_title;
        }
      }
    }
  }
}

/**
 * Implements hook_page_attachments()
 */
function wendys_core_page_attachments(array &$page) {
  //$page['#attached']['library'][] = 'wendys_core/wendys.authentication';
}

/**
 * Implements hook_tokens().
 */
/*
function wendys_core_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $token_service = \Drupal::token();

  $replacements = [];

  if ($type == 'wendys') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'account_name':
          $replacements[$original] = Markup::create('<span data-replace="account-name" class="account-name"></span>');
          break;
      }
    }
  }
  return $replacements;
  }*/

/**
 * Implements hook_token_info().
 */
function wendys_core_token_info() {
  $types['wendys'] = [
    'name' => t("Spire"),
    'description' => t("Custom token type defined for sitewide Wendy's use."),
  ];

  $mytoken['account_name'] = [
    'name' => t("Account Name"),
    'description' => t("Account name when signed in."),
  ];

  return [
    'types' => $types,
    'tokens' => [
      'wendys' => $mytoken,
    ],
  ];
}
